<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Echo.Platforms.AsmResolver</name>
    </assembly>
    <members>
        <member name="T:Echo.Platforms.AsmResolver.AsmResolverExtensions">
            <summary>
            Provides extension methods to AsmResolver models.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ToEchoRange(AsmResolver.DotNet.Code.Cil.CilExceptionHandler)">
            <summary>
            Converts an instance of <see cref="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandler"/> to an <see cref="T:Echo.ControlFlow.Regions.Detection.ExceptionHandlerRange"/>. 
            </summary>
            <param name="handler">The handler to convert.</param>
            <returns>The converted handler.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ToEchoRanges(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Code.Cil.CilExceptionHandler})">
            <summary>
            Converts a collection of <see cref="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandler"/> instances to a collection of
            <see cref="T:Echo.ControlFlow.Regions.Detection.ExceptionHandlerRange"/> instances. 
            </summary>
            <param name="handlers">The handlers to convert.</param>
            <returns>The converted handlers.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ConstructStaticFlowGraph(AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Constructs a control flow graph from a CIL method body.
            </summary>
            <param name="self">The method body.</param>
            <returns>The control flow graph.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.AsmResolverExtensions.ConstructSymbolicFlowGraph(AsmResolver.DotNet.Code.Cil.CilMethodBody,Echo.DataFlow.DataFlowGraph{AsmResolver.PE.DotNet.Cil.CilInstruction}@)">
            <summary>
            Constructs a control flow graph and a data flow graph from a CIL method body.
            </summary>
            <param name="self">The method body.</param>
            <param name="dataFlowGraph">The constructed data flow graph.</param>
            <returns>The control flow graph.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilArchitecture">
            <summary>
            Provides a description of the CIL instruction set architecture (ISA) that is modelled by AsmResolver.   
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.#ctor(AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Creates a new CIL architecture description based on a CIL method body.
            </summary>
            <param name="parentBody">The method body.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilArchitecture.MethodBody">
            <summary>
            Gets the method body that was encapsulated.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilArchitecture.SuccessorResolver">
            <summary>
            Gets the default static successor resolution engine for this architecture.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetLocal(AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Gets the Echo symbol for the provided <see cref="T:AsmResolver.DotNet.Code.Cil.CilLocalVariable"/> instance.
            </summary>
            <param name="variable">The local variable.</param>
            <returns>The Echo symbol representing the local variable.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetParameter(AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Gets the Echo symbol for the provided <see cref="T:AsmResolver.DotNet.Collections.Parameter"/> instance.
            </summary>
            <param name="variable">The parameter.</param>
            <returns>The Echo symbol representing the parameter.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetOffset(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetSize(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetFlowControl(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetStackPushCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetStackPopCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetReadVariablesCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetReadVariables(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.Core.Code.IVariable})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetWrittenVariablesCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilArchitecture.GetWrittenVariables(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.Core.Code.IVariable})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilInstructionFormatterAdapter">
            <summary>
            Provides a custom formatter for <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstruction"/>s.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilInstructionFormatterAdapter.Format(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilParameter">
            <summary>
            Represents a parameter that is declared and can be referenced within a CIL method.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilParameter.#ctor(AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Creates a new CIL parameter.
            </summary>
            <param name="parameter">The underlying parameter</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilParameter.Parameter">
            <summary>
            Gets the underlying parameter object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilParameter.Name">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilParameter.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilPurityClassifier">
            <summary>
            Provides an implementation for the <see cref="T:Echo.Core.Code.IPurityClassifier`1"/> interface that determines
            whether CIL instructions are considered pure or have side effects.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilPurityClassifier.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.CilPurityClassifier"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.LocalWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to local variables should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.ArrayWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to arrays should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.PointerWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to pointers should be considered pure or not.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultFieldAccessPurity">
            <summary>
            Gets or sets a value indicating whether field read accesses should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultFieldWritePurity">
            <summary>
            Gets or sets a value indicating whether writes to field should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultMethodAccessPurity">
            <summary>
            Gets or sets a value indicating whether method accesses (e.g. reading method pointers) should be
            considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultMethodCallPurity">
            <summary>
            Gets or sets a value indicating whether method calls should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultIndirectCallPurity">
            <summary>
            Gets or sets a value indicating whether indirect method calls should be considered pure or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.DefaultTypeAccessPurity">
            <summary>
            Gets or sets a value indicating whether type access (e.g. pushing type tokens) should be considered pure
            or not by default.  
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.KnownPureMethods">
            <summary>
            Gets a mutable collection of known methods that should be considered pure.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilPurityClassifier.KnownImpureMethods">
            <summary>
            Gets a mutable collection of known methods that should be considered impure and guaranteed have side-effects.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilPurityClassifier.IsPure(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilStateTransitionResolver">
            <summary>
            Provides an implementation of a state transition resolver for the CIL instruction set.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitionResolver.#ctor(Echo.Platforms.AsmResolver.CilArchitecture)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.CilStateTransitionResolver"/> class.
            </summary>
            <param name="architecture">The CIL architecture variant to compute state transitions for.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitionResolver.GetInitialState(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitionResolver.GetTransitionCount(Echo.DataFlow.Emulation.SymbolicProgramState{AsmResolver.PE.DotNet.Cil.CilInstruction}@,AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStateTransitionResolver.GetTransitions(Echo.DataFlow.Emulation.SymbolicProgramState{AsmResolver.PE.DotNet.Cil.CilInstruction}@,AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.ControlFlow.Construction.Symbolic.StateTransition{AsmResolver.PE.DotNet.Cil.CilInstruction}})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver">
            <summary>
            Provides an implementation of <see cref="T:Echo.ControlFlow.Construction.Static.IStaticSuccessorResolver`1"/>
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.Instance">
            <summary>
            Gets a reusable singleton instance of the static successor resolver for the CIL architecture.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.GetSuccessorsCount(AsmResolver.PE.DotNet.Cil.CilInstruction@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilStaticSuccessorResolver.GetSuccessors(AsmResolver.PE.DotNet.Cil.CilInstruction@,System.Span{Echo.ControlFlow.Construction.SuccessorInfo})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.CilVariable">
            <summary>
            Represents a variable that is declared and can be referenced within a CIL method body.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilVariable.#ctor(AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Creates a new CIL variable.
            </summary>
            <param name="variable">The underlying variable object.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilVariable.Variable">
            <summary>
            Gets the underlying local variable object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.CilVariable.Name">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.CilVariable.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext">
            <summary>
            Provides a context for executing instructions within a virtual machine. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.#ctor(System.IServiceProvider,Echo.Platforms.AsmResolver.Emulation.CilProgramState,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext"/> class.
            </summary>
            <param name="serviceProvider">The object providing additional services to the emulator.</param>
            <param name="programState">The current state of the program.</param>
            <param name="cancellationToken">The cancellation token to use for cancelling the execution.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.ProgramState">
            <summary>
            Gets the current state of the program.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.CancellationToken">
            <summary>
            Gets the cancellation token to use for cancelling the execution.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.Exit">
            <summary>
            Gets or sets a value indicating the execution should terminate.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.Result">
            <summary>
            Gets the final result of the execution of the program.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilExecutionContext.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>The service object.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilProgramState">
            <summary>
            Represents a snapshot of the state of the program in a particular point of execution of a CIL method body.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilProgramState.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory)">
            <summary>
            Creates a new empty instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilProgramState"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilProgramState.ProgramCounter">
            <summary>
            Gets the offset to the current instruction to be executed.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilProgramState.Stack">
            <summary>
            Gets the current state of the evaluation stack.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilProgramState.Variables">
            <summary>
            Gets the current state of all variables defined in the method body.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilVariableState">
            <summary>
            Provides an implementation of a variable state in a CIL environment, that initially assigns for every
            variable a default value using an instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory"/> interface.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVariableState.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory)">
            <summary>
            Creates a new variable state snapshot, using the provided default value.
            </summary>
            <param name="valueFactory">The factory responsible for creating the default value for all variables.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVariableState.Item(Echo.Core.Code.IVariable)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVariableState.GetAllRecordedVariables">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVariableState.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVariableState.Remove(Echo.Core.Code.IVariable)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVariableState.Clear">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine">
            <summary>
            Provides a dispatcher based implementation for a virtual machine, capable of emulating a single managed method
            body implemented using the CIL instruction set.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ExecutionTerminated">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.#ctor(AsmResolver.DotNet.Code.Cil.CilMethodBody,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine"/>. 
            </summary>
            <param name="methodBody">The method body to emulate.</param>
            <param name="is32Bit">Indicates whether the virtual machine should run in 32-bit mode or in 64-bit mode.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.#ctor(AsmResolver.DotNet.ModuleDefinition,Echo.Core.Code.IStaticInstructionProvider{AsmResolver.PE.DotNet.Cil.CilInstruction},System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine"/>. 
            </summary>
            <param name="module">The module in which the CIL runs in.</param>
            <param name="instructions">The instructions to emulate..</param>
            <param name="is32Bit">Indicates whether the virtual machine should run in 32-bit mode or in 64-bit mode.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Status">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.CurrentState">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Instructions">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Architecture">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Is32Bit">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Module">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.CliMarshaller">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.MethodInvoker">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.StaticFieldFactory">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.ValueFactory">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Dispatcher">
            <summary>
            Gets or sets the dispatcher used for the execution of instructions.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Execute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.OnExecutionTerminated(Echo.Concrete.Emulation.ExecutionTerminatedEventArgs)">
            <summary>
            Invoked when the execution of the virtual machine is terminated.
            </summary>
            <param name="e">The arguments describing the event.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.CilVirtualMachine.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.AfterInstructionDispatchEventArgs">
            <summary>
            Provides arguments for describing an event that fires after an instruction was dispatched and executed. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.AfterInstructionDispatchEventArgs.#ctor(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Emulation.DispatchResult)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.AfterInstructionDispatchEventArgs"/> class.
            </summary>
            <param name="context">The context in which the instruction was executed.</param>
            <param name="instruction">The instruction that was executed.</param>
            <param name="result">The produced result.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.AfterInstructionDispatchEventArgs.Result">
            <summary>
            Gets the result that was produced after dispatching.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElem">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElem.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElem.GetElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElem.GetUnknownElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemBase">
            <summary>
            Provides a base handler for instructions with any variant of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem"/> operation codes.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemBase.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemBase.GetElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32)">
            <summary>
            Obtains the value in the array using the provided operation code.
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="array">The array to get the element from.</param>
            <param name="index">The index of the element to get.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemBase.GetUnknownElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Creates a fully unknown value that was read from the array. 
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <returns>The value.</returns>
            <remarks>
            This method is called when either the array or the index of the requested element is not fully known.
            </remarks>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemMacro">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemMacro.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemMacro.GetElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdElemMacro.GetUnknownElementValue(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdLen">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldlen"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdLen.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.LdLen.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.NewArr">
            <summary>
            Provides a base handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Newarr"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.NewArr.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.NewArr.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElem">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElem.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElem.StoreElement(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemBase">
            <summary>
            Provides a base handler for instructions with any variant of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem"/> operation codes.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemBase.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemBase.StoreElement(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue)">
            <summary>
            Stores an element in the provided array using the instruction's operation code.
            </summary>
            <param name="context">The execution context the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="dotNetArray">The array to store the value in.</param>
            <param name="index">The index to store the element at.</param>
            <param name="value">The value of the element.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemMacro">
            <summary>
            Provides a base handler for instructions with one of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem"/> macro operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemMacro.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Arrays.StElemMacro.StoreElement(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue,System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs">
            <summary>
            Provides arguments for describing an event that fires before an instruction is dispatched and executed. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs.#ctor(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs"/> class.
            </summary>
            <param name="context">The context in which the instruction is being executed.</param>
            <param name="instruction">The instruction that is being executed.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the instruction is handled and should not be dispatched to the
            default operation handler.
            </summary>
            <remarks>
            When this property is set to <c>true</c>, the <see cref="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs.ResultOverride"/> property will be used as the
            final emulation result.
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs.ResultOverride">
            <summary>
            Gets or sets the dispatch result when this instruction is handled externally. 
            </summary>
            <remarks>
            This value is ignored when the <see cref="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs.Handled"/> property is set to <c>false</c>.
            </remarks>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher">
            <summary>
            Provides a default implementation for a CIL operation code handler dispatcher.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.BeforeInstructionDispatch">
            <inheritdoc />
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.AfterInstructionDispatch">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.#ctor">
            <summary>
            Creates a new CIL dispatcher using the handlers defined in the current module. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.#ctor(System.Reflection.Module)">
            <summary>
            Creates a new CIL dispatcher using the handlers defined in the provided module. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.DispatcherTable">
            <summary>
            Gets the used dispatcher table.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.GetOpCodeHandler(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Obtains the operation code handler for the provided instruction. 
            </summary>
            <param name="instruction">The instruction to get the handler for.</param>
            <returns>The operation code handler.</returns>
            <exception cref="T:Echo.Concrete.Emulation.UndefinedInstructionException">Occurs when the instruction is invalid or unsupported.</exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.OnBeforeInstructionDispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.BeforeInstructionDispatchEventArgs)">
            <summary>
            Invoked when an instruction is about to be dispatched. 
            </summary>
            <param name="e">The arguments describing the event.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.CilDispatcher.OnAfterInstructionDispatch(Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs)">
            <summary>
            Invoked when an instruction is about to be dispatched. 
            </summary>
            <param name="e">The arguments describing the event.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI4">
            <summary>
            Provides a handler for instructions with any variant of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4"/> operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI4.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI4.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI8">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I8"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI8.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcI8.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR4">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_R4"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR4.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR4.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR8">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_R8"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR8.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.LdcR8.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.Ldstr">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldstr"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.Ldstr.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Constants.Ldstr.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Beq">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Beq"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Beq_S"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Beq.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Beq.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Beq.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Beq.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bge">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge"/>, <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_S"/>,
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_Un"/>, or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_Un_S"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bge.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bge.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bge.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bge.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bgt">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt"/>, <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_S"/>,
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_Un"/>, or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_Un_S"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bgt.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bgt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bgt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bgt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler">
            <summary>
            Provides a base for all branching operation codes that pop two arguments from the stack.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler.ArgumentCount">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Determines whether the branch condition has been met, based on two integer values.
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> if not, and <see cref="F:Echo.Core.Trilean.Unknown"/>
            if the conclusion is unknown.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <summary>
            Determines whether the branch condition has been met, based on two floating point values.
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> if not, and <see cref="F:Echo.Core.Trilean.Unknown"/>
            if the conclusion is unknown.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BinaryBranchHandler.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <summary>
            Determines whether the branch condition has been met, based on two object references.
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> if not, and <see cref="F:Echo.Core.Trilean.Unknown"/>
            if the conclusion is unknown.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ble">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble"/>, <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_S"/>,
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_Un"/>, or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_Un_S"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ble.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ble.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ble.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ble.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Blt">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt"/>, <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_S"/>,
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_Un"/>, or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_Un_S"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Blt.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Blt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Blt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Blt.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bne">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bne_Un"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bne_Un_S"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bne.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bne.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bne.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Bne.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Br">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Br"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Br_S"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Br.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Br.ArgumentCount">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Br.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandler">
            <summary>
            Provides a base for all branching operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandler.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandler.ArgumentCount">
            <summary>
            Gets the number of arguments the branch pops from the stack.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandler.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BranchHandler.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Determines whether the branch condition has been met.
            </summary>
            <param name="context">The context in which the instruction is being executed in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <returns><c>true</c> if the branch should be taken, <c>false</c> if not, and <see cref="F:Echo.Core.Trilean.Unknown"/>
            if the conclusion is unknown.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrFalse">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brfalse"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brfalse_S"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrFalse.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrFalse.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrTrue">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brtrue"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brtrue_S"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrTrue.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.BrTrue.VerifyCondition(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ret">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ret"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ret.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Ret.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Switch">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Switch"/>  operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Switch.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ControlFlow.Switch.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler">
            <summary>
            Provides a base for all handlers that target fallthrough operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.FallThroughOpCodeHandler.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilDispatcher">
            <summary>
            Provides members for dispatching instructions for a certain architecture. 
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilDispatcher.BeforeInstructionDispatch">
            <summary>
            Represents the event that is fired before an instruction is dispatched to an operation code handler.
            </summary>
        </member>
        <member name="E:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilDispatcher.AfterInstructionDispatch">
            <summary>
            Represents the event that is fired after an instruction is dispatched and executed.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilDispatcher.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Dispatches the provided instruction to an operation code handler.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="instruction">The instruction to evaluate.</param>
            <returns>The dispatch result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilOpCodeHandler">
            <summary>
            Represents an operation code handler executing an instruction in a virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilOpCodeHandler.SupportedOpCodes">
            <summary>
            Gets a collection of operation codes that are supported by this handler.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ICilOpCodeHandler.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Executes an instruction in the provided context.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="instruction">The instruction to execute.</param>
            <returns>A result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs">
            <summary>
            Provides arguments for describing events related to instruction dispatch.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs.#ctor(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs"/> class.
            </summary>
            <param name="context">The context in which the instruction is executed.</param>
            <param name="instruction">The instruction to execute.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs.Context">
            <summary>
            Gets the context in which the instruction is or was executed.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.InstructionDispatchEventArgs.Instruction">
            <summary>
            Gets the instruction that was executed or to execute. 
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.CkFinite">
            <summary>
            Provides a handler for instructions with the CKFINITE operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.CkFinite.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.CkFinite.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Dup">
            <summary>
            Provides a handler for instructions with the DUP operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Dup.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Dup.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Nop">
            <summary>
            Provides a handler for instructions with the NOP operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Nop.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Pop">
            <summary>
            Provides a handler for instructions with the POP operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Pop.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Miscellaneous.Pop.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Call">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Call"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Call.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Call.DevirtualizeMethod(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallBase">
            <summary>
            Provides a base for operation code handlers that call procedures outside of the method body. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallBase.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallBase.DevirtualizeMethod(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue})">
            <summary>
            Devirtualizes the method referenced by the provided instruction, and infers the actual method
            implementing the referenced method that was called.
            </summary>
            <param name="instruction">The call instruction.</param>
            <param name="arguments">The arguments of the method call.</param>
            <returns>The result of the devirtualization process.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Calli">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Calli"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Calli.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.Calli.DevirtualizeMethod(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallVirt">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Callvirt"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallVirt.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.CallVirt.DevirtualizeMethod(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IList{Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue})">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFld">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldfld"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFld.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdFld.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFld">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldsfld"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFld.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.LdsFld.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult">
            <summary>
            Provides information about the result of a method devirtualization process.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.#ctor(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Creates a new successful method devirtualization result. 
            </summary>
            <param name="method">The resolved method.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.#ctor(AsmResolver.DotNet.Signatures.MethodSignature)">
            <summary>
            Creates a new successful method devirtualization result. 
            </summary>
            <param name="methodSig">The resolved Method Signature.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.#ctor(System.Exception)">
            <summary>
            Creates a new unsuccessful method devirtualization result.
            </summary>
            <param name="exception">The exception that occurred during the method devirtualization.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.ResultingMethod">
            <summary>
            When successful, gets the resulting devirtualized method.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.ResultingMethodSignature">
            <summary>
            When successful, gets the resulting devirtualized method signature.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.Exception">
            <summary>
            When unsuccessful, gets the exception thrown during the devirtualization process. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.IsSuccess">
            <summary>
            Gets a value indicating whether the devirtualization process of the referenced method was successful.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.IsUnknown">
            <summary>
            Gets a value indicating whether the devirtualization process could not be completed due to an unknown
            object that was dereferenced.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.MethodDevirtualizationResult.GetMethodSignature">
            <summary>
            Gets the method signature of the method that was resolved.
            </summary>
            <returns>The signature.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the dispatch was unsuccessful.</exception>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObj">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Newobj"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObj.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.NewObj.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.SizeOf">
            <summary>
            Provides a handle for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sizeof"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.SizeOf.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.SizeOf.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StFld">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stfld"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StFld.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StFld.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StsFld">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stsfld"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StsFld.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.ObjectModel.StsFld.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Add">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Add"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Add.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Add.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Add.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Add.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.And">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.And"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.And.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.And.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.And.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.And.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator">
            <summary>
            Provides a base for all binary numeric operation codes.
            </summary>
            <remarks>
            Handlers that inherit from this class evaluate instructions with two operands and follow table III.1.2 in
            the ECMA-335, 6th edition (June 2012). 
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <summary>
            Performs the operation on the two pushed floating point values.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left side of the operation.</param>
            <param name="right">The right side of the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Performs the operation on the two pushed integers.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            /// <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left side of the operation.</param>
            <param name="right">The right side of the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.BinaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <summary>
            Performs the operation on the two pushed object references.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            /// <param name="instruction">The instruction that is being executed.</param>
            <param name="left">The left side of the operation.</param>
            <param name="right">The right side of the operation.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Ceq">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ceq"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Ceq.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Ceq.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Ceq.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Ceq.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Cgt">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cgt"/> or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cgt_Un"/>
            operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Cgt.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Cgt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Cgt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Cgt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Clt">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Clt"/> or <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Clt_Un"/>
            operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Clt.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Clt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Clt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Clt.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ComparisonOperator">
            <summary>
            Provides a base for all comparison operation codes.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ComparisonOperator.ConvertToI4AndReturnSuccess(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Core.Trilean)">
            <summary>
            Converts the provided trilean to an I4 stack value, pushes it onto the stack and returns the success
            dispatcher result.
            </summary>
            <param name="context">The current execution context.</param>
            <param name="result">The trilean value.</param>
            <returns>The dispatch result.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Conv">
            <summary>
            Provides a handler for instructions with any variant of the Conv operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Conv.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Conv.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Div">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Div"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Div.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Div.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Div.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Div.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Mul">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Mul"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Mul.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Mul.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Mul.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Mul.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Neg">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Neg"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Neg.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Neg.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Neg.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Not">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Not"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Not.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Not.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Not.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Or">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Or"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Or.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Or.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Or.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Or.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem">
            <summary>
            Provides a handler for instructions with the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Rem.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ShiftOperator">
            <summary>
            Provides a base for all integer shift operation codes.
            </summary>
            <remarks>
            Handlers that inherit from this class evaluate instructions with two operands and follow table III.1.6 in
            the ECMA-335, 6th edition (June 2012). 
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ShiftOperator.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ShiftOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.ShiftOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,System.Int32)">
            <summary>
            Performs the operation on the two pushed integers.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="instruction">The instruction that is being executed.</param>
            <param name="value">The pushed integer value to shift</param>
            <param name="shiftCount">The amount to shift the value with.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shl">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shl"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shl.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shl.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shr">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shr"/> and <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shr_Un"/>
            operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shr.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Shr.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Sub">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sub"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Sub.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Sub.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Sub.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Sub.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.UnaryNumericOperator">
            <summary>
            Provides a base for all unary numeric operation codes.
            </summary>
            <remarks>
            Handlers that inherit from this class evaluate instructions with two operands and follow table III.1.3 in
            the ECMA-335, 6th edition (June 2012). 
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.UnaryNumericOperator.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.UnaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.UnaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <summary>
            Performs the operation on the pushed floating point value.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="value">The pushed value to perform the operation on.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.UnaryNumericOperator.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Performs the operation on the pushed integer value.
            </summary>
            <param name="context">The context to execute the instruction in.</param>
            <param name="value">The pushed value to perform the operation on.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Xor">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Xor"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Xor.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Xor.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Xor.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Concrete.Values.ValueType.IntegerValue,Echo.Concrete.Values.ValueType.IntegerValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Operators.Xor.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpBlk">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cpblk"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpBlk.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpBlk.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpObj">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cpobj"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpObj.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.CpObj.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitBlk">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Initblk"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitBlk.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitBlk.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitObj">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Initobj"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitObj.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.InitObj.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdInd">
            <summary>
            Provides a handler for instructions with one of the LDIND operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdInd.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdInd.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdObj">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldobj"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdObj.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.LdObj.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.Localloc">
            <summary>
            Provides a handler for instructions with the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Localloc"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.Localloc.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.Localloc.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StInd">
            <summary>
            Provides a handler for instructions with one of the STIND operation codes.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StInd.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StInd.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StObj">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stobj"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StObj.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Pointers.StObj.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArg">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArg.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdArg.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLoc">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLoc.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.LdLoc.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StArg">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StArg.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StArg.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StLoc">
            <summary>
            Provides a handler for instructions with a variation of the <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc"/> operation code.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StLoc.SupportedOpCodes">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Dispatch.Variables.StLoc.Execute(Echo.Platforms.AsmResolver.Emulation.CilExecutionContext,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment">
            <summary>
            Provides members for describing an environment that a .NET virtual machine runs in.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.Architecture">
            <summary>
            Gets the architecture description of the instructions to execute. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.Is32Bit">
            <summary>
            Gets a value indicating whether the virtual machine runs in 32-bit mode or in 64-bit mode.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.Module">
            <summary>
            Gets the module that this execution context is part of. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.CliMarshaller">
            <summary>
            Gets the object responsible for marshalling concrete values to values that can be put
            on the evaluation stack and back. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.MethodInvoker">
            <summary>
            Gets the object responsible for making calls to procedures outside of the method body.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.StaticFieldFactory">
            <summary>
            Gets the object responsible for maintaining static fields within the virtual machine.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.ICilRuntimeEnvironment.ValueFactory">
            <summary>
            Gets the object responsible for constructing new virtual values.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker">
            <summary>
            Provides members for calling methods within a CIL virtual machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker.Invoke(AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IEnumerable{Echo.Concrete.Values.IConcreteValue})">
            <summary>
            Invokes a method definition and returns the result.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="arguments">The arguments passed onto the method.</param>
            <returns>
            The return value of the method, or <c>null</c> if the method returned <see cref="T:System.Void"/>.
            </returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker.InvokeIndirect(Echo.Concrete.Values.IConcreteValue,AsmResolver.DotNet.Signatures.MethodSignature,System.Collections.Generic.IEnumerable{Echo.Concrete.Values.IConcreteValue})">
            <summary>
            Invokes a function pointer and returns the result.
            </summary>
            <param name="address">The method pointer.</param>
            <param name="methodSig">The method signature.</param>
            <param name="arguments">The arguments passed onto the method.</param>
            <returns>
            The return value of the method, or <c>null</c> if the method returned <see cref="T:System.Void"/>.
            </returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker">
            <summary>
            Provides an implementation for an <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.IMethodInvoker"/> that always returns an unknown value when the
            called method is non-void.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker"/> class.
            </summary>
            <param name="valueFactory">The factory responsible for constructing the unknown values.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker.ValueFactory">
            <summary>
            Gets the factory that is responsible for constructing the unknown values. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker.Invoke(AsmResolver.DotNet.IMethodDescriptor,System.Collections.Generic.IEnumerable{Echo.Concrete.Values.IConcreteValue})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker.InvokeIndirect(Echo.Concrete.Values.IConcreteValue,AsmResolver.DotNet.Signatures.MethodSignature,System.Collections.Generic.IEnumerable{Echo.Concrete.Values.IConcreteValue})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Invocation.ReturnUnknownMethodInvoker.CreateReturnValue(AsmResolver.DotNet.Signatures.MethodSignatureBase)">
            <summary>
            Creates the return value of a method signature.
            </summary>
            <param name="methodSig">Method Signature</param>
            <returns></returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.StaticField">
            <summary>
            Provides an adapter for static fields represented by a <see cref="T:AsmResolver.DotNet.IFieldDescriptor"/> to an instance
            of the <see cref="T:Echo.Core.Code.IVariable"/> interface. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StaticField.#ctor(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.StaticField"/> class.
            </summary>
            <param name="field">The field to encapsulate </param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.StaticField.Name">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.StaticField.Field">
            <summary>
            Gets the static field that was encapsulated.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.StaticField.Value">
            <summary>
            Gets or sets the value assigned to the static field.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StaticField.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.StaticFieldFactory">
            <summary>
            Provides a mechanism for creating and storing static fields within an instance of a .NET virtual machine.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StaticFieldFactory.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.StaticFieldFactory"/> class.
            </summary>
            <param name="valueFactory">The factory responsible for creating unknown values.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.StaticFieldFactory.Get(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Gets or creates an instance of a static field. 
            </summary>
            <param name="field">The field to encapsulate.</param>
            <returns>The static field.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType">
            <summary>
            Provides members for describing all different types of values that can be stored
            on the evaluation stack of the Common Language Infrstructure (CLI).
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.Int32">
            <summary>
            Indicates the value is a 32 bit integer.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.Int64">
            <summary>
            Indicates the value is a 64 bit integer. 
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.NativeInt">
            <summary>
            Indicates the value is a native integer.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.F">
            <summary>
            Indicates the value is a floating point number type F.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.O">
            <summary>
            Indicates the value is an object reference type O.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.UnmanagedPointer">
            <summary>
            Indicates the value is a managed pointer type &amp;.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.ManagedPointer">
            <summary>
            Indicates the value is an unmanaged pointer type *.
            </summary>
        </member>
        <member name="F:Echo.Platforms.AsmResolver.Emulation.Values.Cli.CliValueType.Structure">
            <summary>
            Indicates the value is a custom structure.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue">
            <summary>
            Represents a floating point numerical value on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.#ctor(System.Double)">
            <summary>
            Creates a new fully known concrete floating point numerical value.
            </summary>
            <param name="value">The raw 64 bit value.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.IsGreaterThan(Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,System.Boolean)">
            <summary>
            Determines whether the floating point value is considered greater than the provided floating point value.
            </summary>
            <param name="other">The other floating point value.</param>
            <param name="allowUnordered">Determines the return value when one of the values is NaN.</param>
            <returns><c>true</c> if the current value is greater than the provided value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.IsLessThan(Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,System.Boolean)">
            <summary>
            Determines whether the floating point value is considered less than the provided floating point value.
            </summary>
            <param name="other">The other floating point value.</param>
            <param name="allowUnordered">Determines the return value when one of the values is NaN.</param>
            <returns><c>true</c> if the current value is less than the provided value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value">
            <summary>
            Represents a 32 bit integer value on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.#ctor(System.Int32)">
            <summary>
            Creates a new, fully known concrete 32 bit integral value.
            </summary>
            <param name="value">The raw 32 bit value.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a new, partially known concrete 32 bit integral value.
            </summary>
            <param name="value">The raw 32 bit value.</param>
            <param name="mask">The bit mask indicating the bits that are known.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.#ctor(System.String)">
            <summary>
            Parses a (partially) known bit string into an 32 bit integer.
            </summary>
            <param name="bitString">The bit string to parse.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value">
            <summary>
            Represents a 64 bit integer value on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.#ctor(System.Int64)">
            <summary>
            Creates a new, fully known concrete 64 bit integral value.
            </summary>
            <param name="value">The raw 32 bit value.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.#ctor(System.Int64,System.UInt64)">
            <summary>
            Creates a new, partially known concrete 64 bit integral value.
            </summary>
            <param name="value">The raw 32 bit value.</param>
            <param name="mask">The bit mask indicating the bits that are known.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.#ctor(System.String)">
            <summary>
            Parses a (partially) known bit string into an 64 bit integer.
            </summary>
            <param name="bitString">The bit string to parse.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue">
            <summary>
            Represents a value on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.CliValueType">
            <summary>
            Gets the CLI type classification of the value.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsI(System.Boolean)">
            <summary>
            Interprets the bits stored in the value as a signed native integer.
            </summary>
            <param name="is32Bit">Determines whether the native integer is 32 bits or 64 bits wide.</param>
            <returns>The signed native integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a native integer.
            </exception>
            <remarks>
            When this CLI value is already a native integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsU(System.Boolean)">
            <summary>
            Interprets the bits stored in the value as an unsigned native integer.
            </summary>
            <param name="is32Bit">Determines whether the native integer is 32 bits or 64 bits wide.</param>
            <returns>The signed native integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a native integer.
            </exception>
            <remarks>
            When this CLI value is already a native integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsI1">
            <summary>
            Interprets the bits stored in the value as a signed 8 bit integer.
            </summary>
            <returns>The signed 8 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as an 8 bit integer.
            </exception>
            <remarks>
            When this CLI value is already an 8 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsU1">
            <summary>
            Interprets the bits stored in the value as an unsigned 8 bit integer.
            </summary>
            <returns>The unsigned 8 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as an 8 bit integer.
            </exception>
            <remarks>
            When this CLI value is already an 8 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsI2">
            <summary>
            Interprets the bits stored in the value as a signed 16 bit integer.
            </summary>
            <returns>The signed 16 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 16 bit integer.
            </exception>
            <remarks>
            When this CLI value is already a 16 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsU2">
            <summary>
            Interprets the bits stored in the value as an unsigned 16 bit integer.
            </summary>
            <returns>The unsigned 16 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 16 bit integer.
            </exception>
            <remarks>
            When this CLI value is already a 16 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsI4">
            <summary>
            Interprets the bits stored in the value as a signed 32 bit integer.
            </summary>
            <returns>The signed 32 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 32 bit integer.
            </exception>
            <remarks>
            When this CLI value is already a 32 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsU4">
            <summary>
            Interprets the bits stored in the value as an unsigned 32 bit integer.
            </summary>
            <returns>The unsigned 32 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 32 bit integer.
            </exception>
            <remarks>
            When this CLI value is already a 32 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsI8">
            <summary>
            Interprets the bits stored in the value as a signed 64 bit integer.
            </summary>
            <returns>The signed 64 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 64 bit integer.
            </exception>
            <remarks>
            When this CLI value is already a 64 bit integer, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsR4">
            <summary>
            Interprets the bits stored in the value as a 32 bit floating point number.
            </summary>
            <returns>The 32 bit floating point number.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 32 bit floating point number.
            </exception>
            <remarks>
            When this CLI value is already a 32 bit floating point number, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsR8">
            <summary>
            Interprets the bits stored in the value as a 64 bit floating point number.
            </summary>
            <returns>The 64 floating point number.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as a 64 bit floating point number.
            </exception>
            <remarks>
            When this CLI value is already a 64 bit floating point number, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.InterpretAsRef(System.Boolean)">
            <summary>
            Interprets the bits stored in the value as an object reference.
            </summary>
            <param name="is32Bit">Indicates whether the reference to the object should be 32 bits or 64 bits wide.</param>
            <returns>The object reference.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the size of the CLI value is too small for it to be interpretable as an object reference.
            </exception>
            <remarks>
            When this CLI value is already an object reference, the same instance is returned.
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed native integer.
            </summary>
            <param name="is32Bit">Indicates whether the native integer should be 32 bits or 64 bits wide.</param>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to an unsigned native integer.
            </summary>
            <param name="is32Bit">Indicates whether the native integer should be 32 bits or 64 bits wide.</param>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 8 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 8 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 16 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 16 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 32 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 32 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 64 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <summary>
            Converts the CLI value to a signed 64 bit integer.
            </summary>
            <param name="unsigned">Indicates whether the value to convert should be treated as an unsigned number or not.</param>
            <param name="overflowed">Indicates the conversion resulted in an overflow.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToR4">
            <summary>
            Converts the CLI value to a 32 bit floating point number.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToR8">
            <summary>
            Converts the CLI value to a 64 floating point number.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue.ConvertToR">
            <summary>
            Interprets the CLI value as an unsigned integer and converts it to a native sized floating point number.
            </summary>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue">
            <summary>
            Represents a native integer that is either 32-bits or 64-bits long, depending on the architecture the program
            is running on.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.#ctor(System.Int64,System.Boolean)">
            <summary>
            Creates a fully known native integer value.
            </summary>
            <param name="value">The known integer value.</param>
            <param name="is32Bit">Indicates whether the integer should be resized to 32-bits or 64-bits.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.#ctor(System.Int64,System.UInt64,System.Boolean)">
            <summary>
            Creates a partially known native integer value.
            </summary>
            <param name="value">The integer value.</param>
            <param name="knownBitmask">The bitmask indicating the known bits of <paramref name="value"/>.</param>
            <param name="is32Bit">Indicates whether the integer should be resized to 32-bits or 64-bits.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.#ctor(System.String,System.Boolean)">
            <summary>
            Parses a (partially) known bit string into an integer.
            </summary>
            <param name="bitString">The bit string to parse.</param>
            <param name="is32Bit">Indicates whether the integer should be resized to 32-bits or 64-bits.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.#ctor(Echo.Concrete.Values.ValueType.IntegerValue,System.Boolean)">
            <summary>
            Converts the provided (partially) known integer value to a native integer.
            </summary>
            <param name="value">The partially known integer value.</param>
            <param name="is32Bit">Indicates whether the integer should be resized to 32-bits or 64-bits.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.CliValueType">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.IsKnown">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.Size">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.GetBit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.SetBit(System.Int32,Echo.Core.Trilean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.GetBits(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.GetMask(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.SetBits(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.MarkFullyUnknown">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ToKnownI64">
            <summary>
            When the value is fully known, gets the raw integer value stored in this native integer as an int64.
            </summary>
            <returns>The integer, sign extended to a 64 bit integer.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue">
            <summary>
            Represents an object reference on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.Null(System.Boolean)">
            <summary>
            Creates a new null object reference value. 
            </summary>
            <param name="is32Bit">Indicates whether the reference to the object is 32 or 64 bits wide.</param>
            <returns>The null reference.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.#ctor(Echo.Concrete.Values.IConcreteValue,System.Boolean,System.Boolean)">
            <summary>
            Creates a new object reference value.
            </summary>
            <param name="referencedObject">The referenced value.</param>
            <param name="isKnown">Indicates whether the value is known.</param>
            <param name="is32Bit">Indicates whether the reference to the object is 32 or 64 bits wide.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue">
            <summary>
            Represents a pointer on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new null pointer value.
            </summary>
            <param name="isKnown">Indicates whether the pointer is known.</param>
            <param name="is32Bit">Indicates the pointer is 32 or 64 bits wide.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.#ctor(Echo.Concrete.Values.IMemoryAccessValue,System.Boolean)">
            <summary>
            Creates a new pointer value.
            </summary>
            <param name="referencedMemory">The base pointer value.</param>
            <param name="is32Bit">Indicates the pointer is 32 or 64 bits wide.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.#ctor(Echo.Concrete.Values.IMemoryAccessValue,System.Int32,System.Boolean)">
            <summary>
            Creates a new pointer value.
            </summary>
            <param name="referencedMemory">The base pointer value.</param>
            <param name="offset">The offset relative to the base pointer.</param>
            <param name="is32Bit">Indicates the pointer is 32 or 64 bits wide.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.ConvertToR">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.PointerValue.Echo#Core#Emulation#IValue#Copy">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue">
            <summary>
            Represents a structure on the evaluation stack of the Common Language Infrastructure (CLI).
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Signatures.Types.TypeSignature,Echo.Concrete.Values.IMemoryAccessValue)">
            <summary>
            Creates a new structure value.
            </summary>
            <param name="valueFactory">The object responsible for memory management in the virtual machine.</param>
            <param name="valueType">The type of the object.</param>
            <param name="contents">The raw contents of the structure.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.CliValueType">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsI(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsU(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsI1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsU1">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsI2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsU2">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsI4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsU4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsI8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.InterpretAsRef(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToI(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToU(System.Boolean,System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToI1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToU1(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToI2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToU2(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToI4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToU4(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToI8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToU8(System.Boolean,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToR4">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToR8">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.Cli.StructValue.ConvertToR">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller">
            <summary>
            Provides a default implementation of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller"/> interface, which marshals concrete values
            put into variables and fields within a .NET program to values on the evaluation stack of the CLI and vice versa. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller"/> class.
            </summary>
            <param name="valueFactory">The factory responsible for constructing concrete values.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.ValueFactory">
            <summary>
            Gets the factory responsible for constructing concrete values.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Is32Bit">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.ToCliValue(Echo.Concrete.Values.IConcreteValue,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Int8ToI4(Echo.Concrete.Values.ValueType.IntegerValue,System.Boolean)">
            <summary>
            Converts the provided (partially) known 8 bit integer value to an I4 value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="signed">Indicates whether the value is originally a signed or an unsigned integer.</param>
            <returns>The marshalled value.</returns>
            <remarks>
            This method implements the conversion rules for 8 bit integers to 32 bit integers as described in the
            ECMA-335 III.1.1.1, and therefore sign extends the value when the integer is signed. This also holds when
            the sign bit is marked unknown. In such a case, all the remaining 24 bits will be marked unknown. 
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Int16ToI4(Echo.Concrete.Values.ValueType.IntegerValue,System.Boolean)">
            <summary>
            Converts the provided (partially) known 16 bit integer value to an I4 value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="signed">Indicates whether the value is originally a signed or an unsigned integer.</param>
            <returns>The marshalled value.</returns>
            <remarks>
            This method implements the conversion rules for 16 bit integers to 32 bit integers as described in the
            ECMA-335 III.1.1.1, and therefore sign extends the value when the integer is signed. This also holds when
            the sign bit is marked unknown. In such a case, all the remaining 16 bits will be marked unknown. 
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.BoolToI4(Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Converts the provided (partially) known boolean value to an I4 value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Int32ToI4(Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Converts the provided (partially) known 32 bit integer value to an I4 value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Int64ToI8(Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Converts the provided (partially) known 64 bit integer value to an I8 value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.IntToI(Echo.Concrete.Values.ValueType.IntegerValue)">
            <summary>
            Converts the provided (partially) known integer value to a native sized integer value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Float32ToR4(Echo.Concrete.Values.ValueType.Float32Value)">
            <summary>
            Converts the provided (partially) known 32 bit floating point number to an F value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.Float64ToR8(Echo.Concrete.Values.ValueType.Float64Value)">
            <summary>
            Converts the provided (partially) known 64 bit floating point number to an F value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.ObjectToStruct(Echo.Concrete.Values.IConcreteValue,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Converts the provided value-typed object into a struct value. 
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="originalType">The original type of the object.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.ObjectToO(Echo.Concrete.Values.IConcreteValue)">
            <summary>
            Converts the provided object value to a type O object reference.
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.PtrToPointerValue(Echo.Concrete.Values.IConcreteValue)">
            <summary>
            Converts the provided object value to a type O object reference.
            </summary>
            <param name="value">The value to marshal.</param>
            <returns>The marshalled value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultCliMarshaller.ToCtsValue(Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory">
            <summary>
            Provides a default implementation of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory"/> interface.  
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory"/> class.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.Is32Bit">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.CreateValue(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.CreateObject(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.AllocateMemory(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.AllocateArray(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.AllocateStruct(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.GetStringValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.GetTypeMemoryLayout(AsmResolver.DotNet.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.DefaultValueFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue">
            <summary>
            Provides a high level representation of a sequence of values. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32)">
            <summary>
            Creates a new array value.
            </summary>
            <param name="valueFactory">The object used to create default elements with.</param>
            <param name="elementType">The type of the elements stored in the array.</param>
            <param name="length">The number of elements stored in the array.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsKnown">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.Size">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.Copy">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsNonZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsPositive">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.IsNegative">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.Type">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.ElementType">
            <summary>
            Gets the type of the elements stored int the array.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.Length">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.LoadElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleArrayValue.StoreElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue">
            <summary>
            Provides a high level implementation of a structure that consists of a collection of fields.
            </summary>
            <remarks>
            This class is <strong>not</strong> meant to be used as an object reference. Instances of the
            <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue"/> class are passed on by-value. They are used for representing instances of value
            types, or the object referenced in an object reference, not the object reference itself. 
            </remarks>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Creates a new instance of a compound object.
            </summary>
            <param name="valueFactory">The object responsible for creating instances of values in a field.</param>
            <param name="objectType">The type of the object.</param>
            <param name="initialize">Indicates whether the object should be initialized with zeroes.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.Type">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsKnown">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.Size">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsNonZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsPositive">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.IsNegative">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.GetFieldValue(AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.SetFieldValue(AsmResolver.DotNet.IFieldDescriptor,Echo.Concrete.Values.IConcreteValue)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.HleStructValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller">
            <summary>
            Provides members for marshalling concrete values put into variables and fields within a .NET program to
            values on the evaluation stack of the Common Language Infrastructure (CLI) and vice versa. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller.Is32Bit">
            <summary>
            Gets a value indicating this marshaller assumes a 32 bit or a 64 bit architecture.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller.ToCliValue(Echo.Concrete.Values.IConcreteValue,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Wraps a concrete value into a CLI value.
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="originalType">The original type of the value as it is stored in a variable or field.</param>
            <returns>The CLI value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller.ToCtsValue(Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Unwraps the CLI value into a concrete value that can be stored in a variable or field.
            </summary>
            <param name="value">The CLI value to unpack.</param>
            <param name="targetType">The target type to marshal the value to.</param>
            <returns>The unpacked value.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue">
            <summary>
            Represents an array-like value that can be used in the context of executing CIL code. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.Length">
            <summary>
            Gets the length of the array structure.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of a particular element type from the array.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <param name="typeLayout">The type layout to read.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a native sized integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a signed 8 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a signed 16 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a signed 32 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a signed 64 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as an unsigned 8 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as an unsigned 16 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as an unsigned 32 bit integer.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a 32 bit floating point number.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as a 64 bit floating point number.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.LoadElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Loads an element of the array as an object reference.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element of a particular element type in the array.
            </summary>
            <param name="index">The index of the element to read.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CLI operates on.</param>
            <param name="typeLayout">The type layout to write.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided native sized integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided signed 8 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided signed 16 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided signed 32 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided signed 64 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided unsigned 8 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided unsigned 16 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided unsigned 32 bit integer.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided 32 bit floating point number
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided 64 bit floating point number.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetArrayValue.StoreElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <summary>
            Replaces an element in the array with the provided object reference.
            </summary>
            <param name="index">The index of the element to replace.</param>
            <param name="value">The value to replace the element with.</param>
            <param name="marshaller">The marshaller to use for converting the raw value to a value the CTS operates on.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetStructValue">
            <summary>
            Represents an object consisting of a collection of fields.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetStructValue.GetFieldValue(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Gets the value of a field stored in the object.
            </summary>
            <param name="field">The field to get the value from.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetStructValue.SetFieldValue(AsmResolver.DotNet.IFieldDescriptor,Echo.Concrete.Values.IConcreteValue)">
            <summary>
            Sets the value of a field stored in the object.
            </summary>
            <param name="field">The field to set the value for.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetValue">
            <summary>
            Provides members for describing a value in a managed .NET environment.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.IDotNetValue.Type">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory">
            <summary>
            Provides factory members for constructing values by type. 
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.Is32Bit">
            <summary>
            Gets a value indicating whether a single pointer returned by this value factory is 32-bits or 64-bits wide.  
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.CreateValue(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Creates a value for the provided type that is optionally initialized with zeroes. 
            </summary>
            <param name="type">The type.</param>
            <param name="initialize">Indicates whether the bits in the created object should be initialized to zero.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.CreateObject(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Creates an object reference to a value for the provided type that is optionally initialized with zeroes. 
            </summary>
            <param name="type">The type.</param>
            /// <param name="initialize">Indicates whether the bits in the created object should be initialized to zero.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.AllocateMemory(System.Int32,System.Boolean)">
            <summary>
            Allocates a chunk of addressable memory on the virtual heap, and returns a pointer value to the start of
            the memory chunk.  
            </summary>
            <param name="size">The size of the region to allocate.</param>
            <param name="initialize">Indicates the memory region should be initialized with zeroes.</param>
            <returns>A pointer to the memory.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.AllocateArray(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32)">
            <summary>
            Allocates an array on the virtual heap.
            </summary>
            <param name="elementType">The type of elements to store in the array.</param>
            <param name="length">The number of elements.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.AllocateStruct(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Allocates a structure.
            </summary>
            <param name="type">The type of object to allocate.</param>
            <param name="initialize">Indicates the memory region should be initialized with zeroes.</param>
            <returns>The allocated object.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.GetStringValue(System.String)">
            <summary>
            Gets the string value for the fully known string literal.
            </summary>
            <param name="value">The string literal.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory.GetTypeMemoryLayout(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Gets the raw memory layout of a type within the virtual machine.
            </summary>
            <param name="type">The type.</param>
            <returns>The memory layout.</returns>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue">
            <summary>
            Represents a low level implementation of a structure.
            </summary>
            <remarks>
            This class is <strong>not</strong> meant to be used as an object reference. Instances of the
            <see cref="T:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue"/> class are passed on by-value. They are used for representing instances of value
            types, or the object referenced in an object reference, not the object reference itself. 
            </remarks>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Length">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.LoadElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElement(System.Int32,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Platforms.AsmResolver.Emulation.Values.Cli.ICliValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementI(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.NativeIntegerValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementI1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementI2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementI4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementI8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I8Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementU1(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementU2(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementU4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.I4Value,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementR4(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementR8(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.FValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.StoreElementRef(System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.Cli.OValue,Echo.Platforms.AsmResolver.Emulation.Values.ICliMarshaller)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.#ctor(Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Signatures.Types.TypeSignature,Echo.Concrete.Values.IMemoryAccessValue)">
            <summary>
            Creates a new low level emulated object. 
            </summary>
            <param name="valueFactory">The object responsible for memory management in the virtual machine.</param>
            <param name="valueType">The type of the object.</param>
            <param name="contents">The raw contents of the object.</param>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ValueFactory">
            <summary>
            Gets the value factory that was used to create this structure.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Is32Bit">
            <summary>
            Indicates the value was constructed in a 32 or 64 bit environment.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Type">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Contents">
            <summary>
            Gets the raw data of the object.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsKnown">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Size">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsNonZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsPositive">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.IsNegative">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ToString">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.GetBits(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.GetMask(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.SetBits(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadBytes(System.Int32,System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadBytes(System.Int32,System.Span{System.Byte},System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteBytes(System.Int32,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteBytes(System.Int32,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadInteger8(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadInteger16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadInteger32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadInteger64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadFloat32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.ReadFloat64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteInteger8(System.Int32,Echo.Concrete.Values.ValueType.Integer8Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteInteger16(System.Int32,Echo.Concrete.Values.ValueType.Integer16Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteInteger32(System.Int32,Echo.Concrete.Values.ValueType.Integer32Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteInteger64(System.Int32,Echo.Concrete.Values.ValueType.Integer64Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteFloat32(System.Int32,Echo.Concrete.Values.ValueType.Float32Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.WriteFloat64(System.Int32,Echo.Concrete.Values.ValueType.Float64Value)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.GetFieldValue(AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.LleStructValue.SetFieldValue(AsmResolver.DotNet.IFieldDescriptor,Echo.Concrete.Values.IConcreteValue)">
            <inheritdoc />
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.PointerValueExtensions">
            <summary>
            Provides extension methods that allow for reading and writing .NET structures from a pointer value.
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.PointerValueExtensions.ReadStruct(Echo.Concrete.Values.IMemoryAccessValue,System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Memory.TypeMemoryLayout)">
            <summary>
            Reads a single .NET structure at the provided offset.
            </summary>
            <param name="self">The base pointer value to read from.</param>
            <param name="offset">The offset to start reading.</param>
            <param name="valueFactory">The memory allocator responsible for managing type layouts.</param>
            <param name="typeLayout">The type layout to read.</param>
            <returns>The read structure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the offset does not fall within the memory range.
            </exception>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.PointerValueExtensions.WriteStruct(Echo.Concrete.Values.IMemoryAccessValue,System.Int32,Echo.Platforms.AsmResolver.Emulation.Values.IValueFactory,AsmResolver.DotNet.Memory.TypeMemoryLayout,Echo.Concrete.Values.IConcreteValue)">
            <summary>
            Writes a single .NET structure at the provided offset.
            </summary>
            <param name="self">The base pointer to write to.</param>
            <param name="offset">The offset to start writing at.</param>
            <param name="valueFactory">The memory allocator responsible for managing type layouts.</param>
            <param name="typeLayout">The structure type to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the offset does not fall within the memory range.
            </exception>
        </member>
        <member name="T:Echo.Platforms.AsmResolver.Emulation.Values.StringValue">
            <summary>
            Represents an unicode string value. 
            </summary>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,Echo.Concrete.Values.IMemoryAccessValue)">
            <summary>
            Creates a new string value.
            </summary>
            <param name="stringType">The string type signature.</param>
            <param name="contents">The raw contents of the string.</param>
            <exception cref="T:System.ArgumentException">
            Occurs when the memory block referenced by <paramref name="contents"/> is of an invalid size.
            </exception>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.Type">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.Length">
            <summary>
            Gets the number of characters stored in the string.
            </summary>
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsKnown">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.Size">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsNonZero">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsPositive">
            <inheritdoc />
        </member>
        <member name="P:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.IsNegative">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.Copy">
            <inheritdoc />
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.GetChar(System.Int32)">
            <summary>
            Gets a single character stored in the string.
            </summary>
            <param name="index">The character index.</param>
            <returns>The character.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.ToString(System.Char)">
            <summary>
            Gets the string representation of the (partially) known string. 
            </summary>
            <param name="unknownChar">The character used for indicating an unknown character in the string.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Echo.Platforms.AsmResolver.Emulation.Values.StringValue.ToString">
            <inheritdoc />
        </member>
    </members>
</doc>
